{"version":3,"sources":["Array.js","App.js","reportWebVitals.js","index.js"],"names":["Array","arr","useState","array","setArray","latestBox","useRef","className","map","num","i","TextField","id","value","variant","inputRef","inputProps","style","textAlign","label","onChange","e","parseInt","target","splice","console","log","current","changeNumber","Fab","color","aria-label","onClick","length","push","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","type","height","width","timeout","AppBar","position","Toolbar","Typography","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA+EeA,MA1Ef,YAA2B,IAATC,EAAQ,EAARA,IAAQ,EAEMC,mBAASD,GAFf,mBAEdE,EAFc,KAEPC,EAFO,KAGlBC,EAAYC,iBAAO,MAgCvB,OACI,sBAAKC,UAAU,QAAf,UAEI,6CACA,uBAHJ,IAGW,uBAENJ,EAAMK,KAAK,SAACC,EAAIC,GACT,OACI,cAACC,EAAA,EAAD,CACIC,GAAM,MAAMF,EAEZG,MAAOJ,EAAII,OAAS,GACpBC,QAAQ,WACRP,UAAU,SACVQ,SAAUV,EACVW,WAAY,CACRC,MAAO,CAAEC,UAAW,WAExBC,MAAM,SACNC,SAAW,SAACC,IAjDpC,SAAsBX,EAAGW,GACrB,IAAMpB,EAAG,YAAOE,GAChBF,EAAIS,GAAGG,MAAQS,SAASD,EAAEE,OAAOV,OAEZ,KAAjBZ,EAAIS,GAAGG,MACPZ,EAAIuB,OAAOd,EAAE,IAEbe,QAAQC,IAAIhB,GACZN,EAASH,GAETwB,QAAQC,IAAIrB,EAAUsB,UAwCFC,CAAalB,EAAEW,KAVZX,MAiBvB,uBAGA,cAACmB,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,aAAaC,QA9CrD,WACI,IAAM/B,EAAG,YAAOE,GACC,GAAZF,EAAIgC,QAAyC,OAA5BhC,EAAIA,EAAIgC,OAAO,GAAGpB,MAEpCY,QAAQC,IAAI,OAEZzB,EAAIiC,KAAK,CAACrB,MAAM,OAChBT,EAASH,KAuCT,SACI,cAAC,IAAD,U,sECxDVkC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAiCCK,MA7Bf,WACE,IAAMC,EAAUV,IADH,EAEajC,mBAAS,IAFtB,mBAENC,EAFM,KAIb,OAJa,KAKX,qCAEA,cAAC,IAAD,CAAQ2C,KAAK,eAAevC,UAAU,YAAYuB,MAAM,UAAUiB,OAAQ,GAAIC,MAAO,GAAIC,QAAS,MAElG,sBAAK1C,UAAU,MAAf,UACE,cAAC2C,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYvC,QAAQ,KAAKP,UAAWsC,EAAQF,MAA5C,yBAMJ,cAAC,EAAD,CAAO1C,IAAKE,IAEZ,cAACmD,EAAA,EAAD,CAAQxC,QAAQ,YAAYgB,MAAM,UAAlC,0BCnCSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69052394.chunk.js","sourcesContent":["import './Array.css';\nimport React, { useState, useRef } from 'react';\nimport { TextField, Fab } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add' ;\n\nfunction Array( { arr } ) {\n\n    const [ array, setArray ] = useState(arr);\n    let latestBox = useRef(null);\n\n    function changeNumber(i, e) {\n        const arr = [...array];\n        arr[i].value = parseInt(e.target.value);\n        // console.log(arr[i].value);\n        if (arr[i].value === '') {\n            arr.splice(i,1); \n        } else {\n            console.log(i);\n            setArray(arr);\n            // latestBox.current.label = \"\";\n            console.log(latestBox.current);\n        }\n\n    }\n    function newNumber() {\n        const arr = [...array];\n        if ( arr.length!=0 && arr[arr.length-1].value === null ) {\n            //box\n            console.log(\"ff\");\n        } else {\n            arr.push({value:null}); \n            setArray(arr);\n        }\n    }\n    function removeNumber(i) {\n        const arr = [...array];\n        arr.splice(i,1); \n        setArray(arr);\n    }\n\n    return(\n        <div className=\"Array\">\n\n            <h1>Add Numbers</h1>\n            <br /> <br />\n\n            {array.map( (num,i) => {\n                    return (\n                        <TextField \n                            id = {\"num\"+i}\n                            key = {i}\n                            value={num.value || \"\" } \n                            variant=\"outlined\"\n                            className=\"number\"\n                            inputRef={latestBox}\n                            inputProps={{\n                                style: { textAlign: \"center\" }\n                            }}\n                            label=\"Number\"\n                            onChange={ (e) => {\n                                changeNumber(i,e);\n                            }}\n                        / >\n                    )\n                }\n            )}\n\n            <br />\n\n            {/* document.getElementById(\"num\"+(array.length-1)).focus(); */}\n            <Fab color=\"primary\" aria-label=\"new-number\" onClick={newNumber} >\n                <AddIcon />\n            </Fab>\n\n        </div>\n    )\n\n}\n\nexport default Array;","// import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Array from './Array' ;\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [array, setArray] = useState([]);\n\n  return (\n    <>\n\n    <Loader type=\"BallTriangle\" className=\"preLoader\" color=\"#00BFFF\" height={80} width={80} timeout={3000} />\n\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            AppSORT\n          </Typography>\n        </Toolbar>\n      </AppBar >\n      \n      <Array arr={array} />\n\n      <Button variant=\"contained\" color=\"primary\">\n        SORT!\n      </Button>      \n\n    </div>\n    </>\n  );\n}\n\nexport default App ;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}